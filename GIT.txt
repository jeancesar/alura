GIT
----------------------------------------------------
"git clone 'urldorepositorio' " => clona a versão master do repositorio do projeto.
"git tag" => listamos todas as "versões" existentes no repositorio.
"git checkout 'branch'" => muda para outra branch do repositório.
	* "git checkout -b 'branch'" => cria uma nova branch e muda para ela.
	* "git checkou -t 'branch_remota'" => copia a branch remota para local, muda para e atualiza.
	* "git checkout 'arquivo'" => descartar todas as alterações que estão no "Working Directory" de um determinado arquivo e retorna para HEAD.
	* "git checkout 'tag'" => mudar a versão do repositorio para o escolhido.
	* "git checkout 'branch' 'arquivo'" => copia o arquivo da branch q deseja para a branch atual e coloca no status de index pronto para o commit.
	* "git checkout -- 'arquivo'" => Essa notação de dois hífens -- indica que os parâmetros seguintes serão todos nomes de arquivos, permitindo que restauremos o arquivo ao estado original.
"git diff 'tag1' 'tag2" => compara a diferença entre as versões do repositorio.
"git blame 'arquivo'" => funcionalidade onde podemos consultar quem foi o autor de cada linha de um arquivo. Para sair do blame, basta apertar a tecla q
"git init" => indica a pasta como repositório.
"git ls-files" => verifica quais os arquivos que pertencem ao nosso repositório.
"git status" => verifica o estatdo dos arquivos
"git add 'arquivo'" => adiciona o arquivo para "track" pelo git
"git add -i" => mais recomendado quando temos um número muito grande de alterações a serem adicionadas ao index e também um grande número de alterações que não gostaríamos de adicionar ao index. O modo interativo inclusive permite que adicionemos seletivamente trechos de um arquivo, deixando algumas modificações de fora mesmo estando no mesmo arquivo, com a opção patch.
"git commit -m "mensagem aqui"" => enviar as alteracoes feitas no(s) arquivo(s).
	* "-a" => inclui imediatamente no commit todos os arquivos modificados ou removidos! Porém, ela não adiciona os arquivos novos. Podemos combinar a opção de mensagem com git commit -a -m 'Mensagem de commit' para não precisar escrever a mensagem no editor padrão do console.
"git push 'alias do repositorio' 'branch'" => para subir todas as alterações para o servidor de arquivo remoto em uma determinada branch.
	* Outra alternativa é utilizar, no primeiro push, a opção -u ou --set-upstream. Ela atrela a branch remota à local, fazendo com que não seja mais necessário passar como parâmetros a origem e a branch no comando push, que fica então assim: git push.
	* "git push -d 'repositorio' 'branch'" => apaga uma branch remota outra opção "git push 'repositorio' :'branch'"
"git remote add 'alias para repositorio' 'url do repositorio criado'" => para adicionar o repositorio remoto ao local adotar padrão "origin" para o alias.
"git log" => para ver todas os commits no repositorio
"git whatchanged" => a mesma coisa que o git log porém os arquivos que foram alterados. Ao executarmos o comando git whatchanged -p é possível visualizar quais as linhas que foram modificadas em cada commit do nosso projeto. Obs: também é possível utilizarmos git log -p, que imprime também os commits nos quais não houve modificação.
"git branch" => lista todas as branchs do repositório.
	* "git branch 'nome_branch'" => cria uma nova branch no repositório.
	* "git branch -r" => listas todas as branch do repositório remoto.
	* "git branch -t 'branch' 'branch remota'" => copia a branch remota para local.
	* "git branch -d" => este comando remove uma branch, porém somente se ela estiver sincronizada com outra. Senão, é necessário forçar com a opção -D.
	* "git branch -a" => listas as branch locais e remotas
"git pull 'nome repositorio' 'branch'" => atualiza a versão do repositório local com remoto.
"git fetch 'repositorio'" => Este comando verifica todas as atualizações que foram realizadas no repositório remoto e traz para a maquina. Mas elas não são aplicadas e precisam de um merge.
"git rebase 'branch'" => copia os commits de uma branch para outra no caso atualizar sua branch com a master.
"git merge 'branch'" => leva todos os commits de uma branch para outra.
"git reset HEAD 'arquivo'" => Caso o arquivo esteja no estado Index e deseja retorna para Working Directory.
"git stash" => permite guardar as alterações nos estados (Working Directory, Index) em uma área especial, de onde podemos recuperá-los depois.
	* "git stash pop" => recuperar o ultimo stash salvo na lista de stash.
	* "git stash list" =>  lista todos os stashes salvos no momento com o comando git stash.
	* "git stash pop stash@{id}" => recupera um stash especifico.
	* "git stash apply" => recuperar o determinado stash sem remover da lista
	* "git stash drop" => Este comando faz com que o último estado salvo seja apagado. Também podemos utilizar o nome de cada elemento do stash para remover algum estado que não seja o último. Por fim, se quisermos excluir todos os estados, podemos utilizar o comando git stash clear.
"git reset 'pnultimo hash'" => desfaz o ultimo commit e retorna para estado do pnultimo hash.
	* "git reset --hard" => Com este comando, as alterações são removidas do histórico local de commits e também tanto do index quanto do working directory, permanentemente.
	* "git reset --soft" => Com este comando, as alterações são removidas do histórico local de commits, mas não são removidas do index.
	* "git reset --hard HEAD~1" => Usando esse comando, descartamos definitivamente as mudanças feitas no último commit.
"git revert -n [hash_do_commit]" => reverte commits antigos preservando os atuais. A opção "-n", para que as alterações sejam revertidas e adicionadas ao nosso Working Directory e Index. É necessário que o Working Directory e o Index estejam "limpos", ou as alterações atuais serão descartadas.
"git show 'hash'" => visualiza as alterações realizadas no commit
"git cherry-pick 'hash'" => copia um commit especifico para sua branch.
	* "-n" => A opção -n ou --no-commit permite que recuperemos as alterações de um dado commit sem precisar inseri-lo no histórico local.

Encontrando o bug ao meio de muitos commits
git bisect start
git bisect bad HEAD
git biscet good 'hash bom'
Acima, iniciamos uma sessão de "bisect" e marcamos o commit HEAD como "bad" (ruim), ou seja, indicamos que ele contém o bug o qual queremos encontrar o momento em que foi introduzido. Agora que o Git sabe qual commit funciona e qual não funciona, ele automaticamente faz o checkout de um commit intermediário para que possamos verificar se funciona.

"git bisect bad" => para afirmar se aquele commit escolhido pelo git ainda está com o bug
"git bisect good" => para afirmar que aquele commit escolhido pelo git está okay.

Git possui 3 estados: Working Directory, Index e Head.
Ao digitarmos HEAD~ seguido de um número inteiro n, será feita uma referência ao n-ésimo commit anterior ao HEAD. Por exemplo, HEAD~1, faz referência ao penúltimo commit e HEAD~2, ao antepenúltimo. No caso específico do penúltimo commit, também pode-se referenciá-lo utilizando o atalho HEAD^.

Opção gráfica para o GIT: http://git-cola.github.io/downloads.html